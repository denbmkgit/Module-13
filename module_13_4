
from cgitb import text
import stat
from tkinter import COMMAND
from uu import decode
from aiogram import Bot, Dispatcher, executor, types 
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import state
from aiogram.dispatcher.filters.state import State, StatesGroup

import asyncio

api = " "
bot = Bot(token=api)
dp = Dispatcher(bot, storage=MemoryStorage())

class UserState(StatesGroup):
    age = State()
    growth = State()
    weight = State()


@dp.message_handler(text='/Start')
async def hello(message):
    await message.answer('I am a bot that can you help calculete colories. Would you like that?  Input:     /Yes /  /No')


@dp.message_handler(text='/Yes')
async def set_age(message):
    await message.answer('Enter your age, please')
    await UserState.age.set()


@dp.message_handler(state=UserState.age)
async def fsm_handler(message, state):
    await state.update_data(age = message.text)
    data = await state.get_data()
    await message.answer(f'You have idicated age {data["age"]}. Enter your growth, please')
    await UserState.growth.set()
    # await state.finish()




@dp.message_handler(state=UserState.growth)
async def fsm_handler(message, state):
    await state.update_data(growth = message.text)
    data = await state.get_data()
    await message.answer(f'You have idicated growth {data["growth"]}. Enter your weight, please')
    await UserState.weight.set()


@dp.message_handler(state=UserState.weight)
async def fsm_handler(message, state):
    await state.update_data(weight = message.text)
    data = await state.get_data()
    await UserState.weight.set()
    calories_for_female = 10 * int(data['weight']) + 6.25 * int(data['growth']) + 5 * int(data['age']) - 161
    await message.answer(f'You have idicated weight {data["weight"]}. Your norma of colories {calories_for_female}.')
    await state.finish()


    # await message.answer(f'You have idicated age {data["first_age"]}')


@dp.message_handler()
async def all_words(message):
    await message.answer('Enter /Start to work')





if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)
