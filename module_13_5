from aiogram import Bot, Dispatcher, executor, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.dispatcher import FSMContext
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
import asyncio


api = ""
bot = Bot(token=api)
dp = Dispatcher(bot, storage=MemoryStorage())

kb = ReplyKeyboardMarkup(resize_keyboard=True)
button1 = KeyboardButton(text='Calculate')
button2 = KeyboardButton(text='Infomation')
kb.add(button1)
kb.add(button2)

class UserState (StatesGroup):
    age = State()
    growth = State()
    weight = State()


@dp.message_handler(commands=['start'])
async def start_message(message):
    print('I am a bot that helps your health')
    await message.answer("Hello. I am a bot that helps your health", reply_markup=kb)

@dp.message_handler(text = 'Calculate')
async def set_age(message):
    await message.answer('Enter your age:')
    await UserState.age.set()

@dp.message_handler(state = UserState.age)
async def set_growth(message, state):
    await state.update_data(age=message.text)
    await message.answer('Enter your growth:')
    await UserState.growth.set()

@dp.message_handler(state=UserState.growth)
async def set_weight(message, state):
    await state.update_data(growth=message.text)
    await message.answer('Enter your wigth:')
    await UserState.weight.set()

@dp.message_handler(state=UserState.weight)
async def set_weight(message, state):
    await state.update_data(weight=message.text)
    data = await state.get_data()
    calories = 10 * int(data['weight']) + 6.25 * int(data['growth']) - 5 * int(data['age']) - 161
    await message.answer(f"Calories for optimal: {calories}")
    await state.finish()

@dp.message_handler()
async def all_message(message):
    print('Enter command /start, to continue.')
    await message.answer("Enter command /start, to continue.")



if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)
